import threading
import multiprocessing
import time

# Function to read a file (simulates I/O-bound operation)
def read_file(file_name):
    print(f"[Thread] Reading {file_name}...")
    time.sleep(0.2)  # Further reduced delay to improve performance
    with open(file_name, 'r') as file:
        content = file.read()
    print(f"[Thread] Finished reading {file_name}")
    return content

# Function to process data (simulates CPU-bound operation)
def encrypt_data(data):
    print(f"[Process] Encrypting data...")
    time.sleep(2)  # Simulate heavy computation
    encrypted = "".join([chr(ord(char) + 1) for char in data])  # Simple encryption
    print(f"[Process] Finished encryption")
    return encrypted

# Function to write data to a file (simulates I/O-bound operation)
def write_file(file_name, data):
    print(f"[Thread] Writing to {file_name}...")
    time.sleep(1)  # Simulate delay
    with open(file_name, 'w') as file:
        file.write(data)
    print(f"[Thread] Finished writing to {file_name}")

# Threading task: Read and write files
def file_task(input_file, output_file):
    content = read_file(input_file)
    write_file(output_file, content)

# Multiprocessing task: Encrypt data
def encryption_task(data, output_file):
    encrypted_data = encrypt_data(data)
    write_file(output_file, encrypted_data)

# Main function
if __name__ == "__main__":
    # Create input files
    input_files = ["file1.txt", "file2.txt", "file3.txt"]
    for i, file_name in enumerate(input_files):
        with open(file_name, 'w') as f:
            f.write(f"Sample data for {file_name}. Line {i+1}.")

    # Multithreading for reading and writing files
    print("\n--- Multithreading: File Reading/Writing ---")
    threads = []
    for i, input_file in enumerate(input_files):
        output_file = f"output_{i+1}.txt"
        thread = threading.Thread(target=file_task, args=(input_file, output_file))
        threads.append(thread)
        thread.start()

    # Wait for all threads to complete
    for thread in threads:
        thread.join()

    # Multiprocessing for encryption
    print("\n--- Multiprocessing: Data Encryption ---")
    processes = []
    encrypted_files = []

    # Start a process for each file
    for i, input_file in enumerate(input_files):
        output_file = f"encrypted_{i+1}.txt"
        encrypted_files.append(output_file)

        # Read data from the output file generated by multithreading
        with open(f"output_{i+1}.txt", 'r') as f:
            data = f.read()

        process = multiprocessing.Process(target=encryption_task, args=(data, output_file))
        processes.append(process)
        process.start()

    # Wait for all processes to complete
    for process in processes:
        process.join()

    print("\n--- All tasks completed ---")

    # Display encrypted file contents
    print("\n--- Encrypted File Contents ---")
    for file_name in encrypted_files:
        with open(file_name, 'r') as f:
            print(f"{file_name}: {f.read()}")
